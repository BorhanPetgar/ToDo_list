<html>

<head>
    <title>TODO App</title>
    <!-- <link rel="icon" type="image/x-icon" href="/todo-icon.png"> -->
    <style>
        .completed-task {
            text-decoration: line-through;
        }

        .checkbox input {
            opacity: 0;
            position: absolute;
            pointer-events: none;
        }

        .checkbox .checkmark {
            position: relative;
            display: inline-block;
            width: 20px;
            height: 20px;
            border: 2px solid #ccc;
            border-radius: 3px;
            margin-right: 10px;
            cursor: pointer;
        }

        .checkbox input:checked~.checkmark:after {
            content: "";
            display: block;
            position: absolute;
            left: 6px;
            top: 2px;
            width: 5px;
            height: 10px;
            border: solid #000;
            border-width: 0 2px 2px 0;
            transform: rotate(45deg);
        }

        .delete-button {
            display: inline-block;
            width: 20px;
            height: 20px;
            border: none;
            background: none;
            cursor: pointer;
        }



        .delete-button::after {
            transform: translate(-50%, -50%) rotate(-45deg);
        }
    </style>
    <link rel="stylesheet" href="/login.css">
    <script></script>
</head>

<body>
    <section>
        <h1 align="center">TODO App</h1>

        <!-- Form to create a task -->
        <form class="task-form" method="POST" action="/create-task" onsubmit="return validateForm()">
            <div>
                <table>
                    <thead>
                        <tr>
                            <th>Add Task</th>
                            <th>Category</th>
                            <th>Date</th>
                            <th>Priority</th>
                            <th>Reminder</th>
                            <th></th>
                            <th></th>
                        </tr>
                    </thead>
                    <tbody id="task-list">
                        <tr>
                            <td><input class="text-" type="text" name="description"
                                    placeholder="What do you need to do?" required></td>
                            <td>
                                <select class="fill-form" name="category" required>
                                    <option class="prio">PERSONAL</option>
                                    <option class="prio">WORK</option>
                                    <option class="prio">SCHOOL</option>
                                    <option class="prio">HOME</option>
                                    <option class="prio">OTHER</option>
                                </select>
                            </td>
                            <td><input class="fill-form" type="date" name="date" required></td>
                            <td>
                                <select class="fill-form" name="priority" required>
                                    <option class="high-priority">HIGH</option>
                                    <option class="medium-priority">MEDIUM</option>
                                    <option class="low-priority">LOW</option>
                                </select>
                            </td>
                            <td><input class="fill-form" type="date" name="reminder" required></td>
                            <td><input class="fill-form" type="submit" value="ADD TASK"></td>
                        </tr>
                    </tbody>
                </table>
        </form>
    </section>
    <div>
        <h1 align="center">TASKS LIST</h1>
        <div style="height: 200px; overflow: auto;">
            <form class="task-form task-table"">

                <table class=" show-tasks">
                <% if (task.length> 0) { %>
                    <thead>
                        <tr>
                            <th>Done</th>
                            <th>Task</th>
                            <th>Category</th>
                            <th>Deadline</th>
                            <th>Priority</th>
                            <th>Reminder</th>
                            <th>Time Remaining</th>
                            <th></th>
                        </tr>
                    </thead>

                    <% for(let i of task) { %>

                        <!-- <tr draggable=" true" ondragstart="start()" ondragover="dragover()"> -->
                        <tr draggable="true" ondragstart="start(event)" ondragover="dragover(event)"
                            ondrop="drop(event)">

                            <td>

                                <input class="tick" type="checkbox" name="taskIds" value="<%= i._id %>"
                                    id="task-<%= i._id %>"
                                    onchange="toggleTaskCompletion(this, '<%= i._id %>', '<%= username %>')"
                                    <%=i.complete ? 'checked' : '' %>

                            </td>
                            <!-- <td> <input type="checkbox" name="taskIds" value="<%= i._id %>"></td> -->
                            <td contenteditable="true"
                                onblur="updateTask(this, '<%= i._id %>','description', '<%= username %>')">
                                <p id="task-description">
                                    <%= i.description %>
                            </td>
                            <td contenteditable="true"
                                onblur="updateTask(this, '<%= i._id %>','category', '<%= username %>')">
                                <p id="task-category"></p>
                                <%= i.category %>
                            </td>
                            <td>
                                <p id="due-date">
                                    <%= i.date %>
                                </p>
                            </td>
                            <td>
                                <p id="task-priority">
                                    <%= i.priority %>
                                </p>
                            </td>
                            <td>
                                <p id="due-date">
                                    <%= i.reminder %>
                                </p>
                            </td>

                            <td>

                                <% if (i.reminder && i.date) { const reminderDate=new Date(i.reminder); const
                                    deadlineDate=new Date(i.date); const timeRemaining=deadlineDate.getTime() - new
                                    Date().getTime(); const daysRemaining=Math.ceil(timeRemaining / (1000 * 3600 * 24));
                                    if (daysRemaining> 0) {
                                    %>
                                    <%= daysRemaining %> days remaining
                                        <% } else if (daysRemaining==0) { %>
                                            Deadline today
                                            <% } else { %>
                                                Deadline passed
                                                <% } } %>

                            </td>
                            <td>
                                <!-- <form action="/delete-task" method="D"> -->
                                <button class="delete-button"
                                    onclick="deleteTask(this, '<%= i._id %>', '<%= username %>')"
                                    data-doc="<%= i._id %>">❌</button>
                                <!-- </form> -->

                            </td>
                            <!-- <td>
                                <button class="edit-button"
                                    onclick="editTask('<%= i._id %>', '<%= username %>')">✎</button>
                            </td> -->

                        </tr>
                        <% } } else {%>


                            <tr>
                                <td colspan="6" align="center">No tasks to display.</td>
                            </tr>

                            <% } %>



                                </table>
        </div>


        </form>
    </div>
    <div align="center">
        <input id="completed-tasks-history" type="submit" value="COMPLETED TASKS"
            onclick="goToCompletedList('<%= username %>')">
    </div>
    <div align="center">
        <input id="sort-button" type="submit" value="SORT" onclick="sortTasks('<%= username %>')">
    </div>

    </div>

    <script>

        function updateTask(cell, taskId, field, username) {
            const value = cell.innerText.trim();

            fetch(`/update-task/${taskId}`, {
                method: 'PATCH',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    taskId: taskId,
                    field: field,
                    value: value,
                    username: username
                }),
            })
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Failed to update task');
                    }
                    console.log('Task updated successfully');

                })
                .catch(error => {
                    console.error('Error updating task:', error);

                });
        }

        function start(event) {
            event.dataTransfer.setData("text/plain", event.target.id);
        }

        function dragover(event) {
            event.preventDefault();
        }

        function drop(event) {
            event.preventDefault();
            const taskId = event.dataTransfer.getData("text/plain");
            const taskList = document.getElementById("task-list");
            const droppedRow = document.getElementById(taskId);
            const targetRow = event.target.closest("tr");

            if (droppedRow !== targetRow) {
                taskList.removeChild(droppedRow);
                const droppedIndex = Array.from(taskList.children).indexOf(droppedRow);
                const targetIndex = Array.from(taskList.children).indexOf(targetRow);

                if (droppedIndex < targetIndex) {
                    taskList.insertBefore(droppedRow, targetRow.nextSibling);
                } else {
                    taskList.insertBefore(droppedRow, targetRow);
                }

                const taskIds = Array.from(taskList.children).map(row => row.querySelector("input[name='taskIds']").value);
                localStorage.setItem("taskOrder", JSON.stringify(taskIds));
            }
        }

        function restoreTaskOrder() {
            const taskOrder = localStorage.getItem("taskOrder");
            if (taskOrder) {
                const taskList = document.getElementById("task-list");
                const taskIds = JSON.parse(taskOrder);
                taskIds.forEach(taskId => {
                    const row = document.getElementById(taskId);
                    if (row) {
                        taskList.appendChild(row);
                    }
                });
            }
        }

        document.addEventListener("DOMContentLoaded", restoreTaskOrder);

        function sortTasks(username) {
            fetch(`/tasks/${username}?sort=${sortOption}`)
                .then(response => response.text())
                .then(html => {
                    document.getElementById('taskList').innerHTML = html;
                })
                .catch(error => {
                    console.log(error);
                });
        }

        function getRowClass(reminder, deadline) {
            if (reminder && deadline) {
                const reminderDate = new Date(reminder);
                const deadlineDate = new Date(deadline);
                const timeRemaining = deadlineDate.getTime() - reminderDate.getTime();
                const daysRemaining = Math.ceil(timeRemaining / (1000 * 3600 * 24));

                if (daysRemaining <= 2) {
                    return "deadline-close";
                }
            }

            return "";
        }

        function validateForm() {
            var dateInput = document.querySelector('input[name="date"]');
            var reminderInput = document.querySelector('input[name="reminder"]');

            var dateValue = new Date(dateInput.value);
            var reminderValue = new Date(reminderInput.value);

            if (reminderValue < dateValue) {
                alert("Reminder cannot be set before the deadline.");
                return false;
            }

            return true;
        }

        var row;
        var startY;

        function start() {
            row = event.target;
            startY = event.clientY;
            console.log('dragging started');
        }

        function dragover() {
            var e = event;
            e.preventDefault();

            let targetRow = e.target.closest('tr');
            let targetRowIndex = Array.from(targetRow.parentNode.children).indexOf(targetRow);
            let draggedRowIndex = Array.from(row.parentNode.children).indexOf(row);

            if (Math.abs(event.clientY - startY) < 10 || targetRow === row || !targetRow) {
                return;
            }

            if (targetRowIndex > draggedRowIndex) {
                targetRow.after(row);
            } else {
                targetRow.before(row);
            }
        }

        function toggleTaskCompletion(checkbox, taskId, username) {

            const complete = checkbox.checked;

            const requestOptions = {
                method: 'PATCH',
                headers: {
                    'Content-Type': 'application/json',
                    'username': username
                },
                body: JSON.stringify({ complete: complete })
            };

            fetch(`/complete-task/${taskId}`, requestOptions)
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Failed to update task');
                    }
                    console.log('Task updated successfully');

                })
                .catch(error => {
                    console.error('Error updating task:', error);

                });
        }

        function deleteTask(button, id, username) {

            console.log('hi');
            const endpoint = `/delete-task/${id}`

            fetch(endpoint, {
                method: 'DELETE',
                headers: { "username": username }
            })
                .then((response) => {
                    if (response.ok) {

                        location.reload();
                        fetch(`/todo/${username}`)
                            .then((response) => response.json())
                            .then((data) => {
                                console.log(data);

                            })
                            .catch((error) => {

                            });
                    } else {

                    }
                })
                .catch((error) => {

                });


            var row = button.parentNode.parentNode;
            console.log(row);
            row.parentNode.removeChild(row);
        }


        function goToCompletedList2(username) {
            const url = '/todo/list-completed'
            window.location.href = url;
        }

        function goToCompletedList(username) {
            fetch(`/todo/list-completed/${username}`, {
                method: 'GET',
            })
                .then(response => response.json())
                .then(data => {

                    window.location.href = '/list';
                })
                .catch(error => {
                    console.error(error);
                });
        }

        function fetchCompletedTasks(username) {
            const completedTasksList = document.getElementById('completed-tasks-list');
            const endpoint = `/completed-tasks-list/${username}`

            fetch(endpoint, {
                method: 'GET',
                headers: { "username": username }
            })

        }


    </script>
</body>

</html>